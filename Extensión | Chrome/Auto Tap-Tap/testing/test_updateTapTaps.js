/**
 * ========================================================================
 * TEST PARA CASO updateTapTaps
 * ========================================================================
 * 
 * Este test verifica que el nuevo caso 'updateTapTaps' a√±adido al content script
 * funcione correctamente para evitar el error "Acci√≥n no reconocida".
 */

console.log('üß™ Iniciando pruebas del caso updateTapTaps...\n');

// Simular el state global
const testState = {
    contador: 10,
    activo: false,
    tiempoReactivacion: 15,
    pausadoPorChat: false
};

// Simular elementos DOM
const testElementos = {
    contadorDiv: {
        textContent: `Tap-Taps: ${testState.contador}`,
        set textContent(value) {
            this._content = value;
            console.log(`üì± PRUEBA: ContadorDiv actualizado a: "${value}"`);
        },
        get textContent() {
            return this._content;
        }
    }
};

// Simular el messageListener del content script
function testMessageListener(request, sender, sendResponse) {
    try {
        console.log('üì® Mensaje recibido:', request);
        
        switch (request.action) {
            case 'getStatus':
                sendResponse({
                    activo: testState.activo,
                    contador: testState.contador,
                    tiempoReactivacion: testState.tiempoReactivacion,
                    pausadoPorChat: testState.pausadoPorChat,
                    enTikTok: true,
                    enLive: true
                });
                break;
                
            case 'toggle':
                testState.activo = !testState.activo;
                console.log(`üîÑ PRUEBA: Toggle ejecutado, activo: ${testState.activo}`);
                sendResponse({ success: true });
                break;
                
            case 'updateReactivationTime':
                if (request.tiempo && request.tiempo >= 10 && request.tiempo <= 60) {
                    testState.tiempoReactivacion = request.tiempo;
                    console.log(`‚è∞ PRUEBA: Tiempo de reactivaci√≥n actualizado: ${request.tiempo}s`);
                    sendResponse({ success: true });
                } else {
                    sendResponse({ error: 'Tiempo inv√°lido' });
                }
                break;
                
            case 'updateTapTaps':
                // Actualizar contador desde popup (principalmente para reset)
                if (request.hasOwnProperty('count') && typeof request.count === 'number') {
                    testState.contador = request.count;
                    if (testElementos.contadorDiv) {
                        testElementos.contadorDiv.textContent = `Tap-Taps: ${testState.contador}`;
                    }
                    console.log(`üéØ PRUEBA: Contador actualizado a: ${request.count}`);
                    sendResponse({ success: true });
                } else {
                    console.log('‚ùå PRUEBA: Valor de contador inv√°lido');
                    sendResponse({ error: 'Valor de contador inv√°lido' });
                }
                break;
                
            default:
                console.log('ü§∑ Acci√≥n no reconocida:', request.action);
                sendResponse({ error: 'Acci√≥n no reconocida' });
                break;
        }
        
    } catch (error) {
        console.error('Error procesando mensaje:', error);
        sendResponse({ error: 'Error interno del content script' });
    }
    
    return true; // Mantener canal abierto para respuesta as√≠ncrona
}

// =============================================================================
// EJECUTAR PRUEBAS
// =============================================================================

console.log('üìã ESTADO INICIAL:');
console.log(`- contador: ${testState.contador}`);
console.log(`- activo: ${testState.activo}`);
console.log(`- contadorDiv: "${testElementos.contadorDiv.textContent}"\n`);

console.log('üß™ EJECUTANDO PRUEBAS DE updateTapTaps');
console.log('============================================================\n');

// Test 1: updateTapTaps con valor v√°lido
console.log('üî• TEST 1: updateTapTaps con valor v√°lido (reset a 0)');
testMessageListener(
    { action: 'updateTapTaps', count: 0 },
    null,
    (response) => {
        if (response.success) {
            console.log('‚úÖ TEST 1 PAS√ì: updateTapTaps funcion√≥ correctamente');
        } else {
            console.log('‚ùå TEST 1 FALL√ì:', response.error);
        }
    }
);

console.log('');

// Test 2: updateTapTaps con valor v√°lido (n√∫mero positivo)
console.log('üî• TEST 2: updateTapTaps con valor positivo (25)');
testMessageListener(
    { action: 'updateTapTaps', count: 25 },
    null,
    (response) => {
        if (response.success) {
            console.log('‚úÖ TEST 2 PAS√ì: updateTapTaps funcion√≥ correctamente');
        } else {
            console.log('‚ùå TEST 2 FALL√ì:', response.error);
        }
    }
);

console.log('');

// Test 3: updateTapTaps con valor inv√°lido (string)
console.log('üî• TEST 3: updateTapTaps con valor inv√°lido (string)');
testMessageListener(
    { action: 'updateTapTaps', count: "invalid" },
    null,
    (response) => {
        if (response.error === 'Valor de contador inv√°lido') {
            console.log('‚úÖ TEST 3 PAS√ì: Error manejado correctamente');
        } else {
            console.log('‚ùå TEST 3 FALL√ì: Error no detectado');
        }
    }
);

console.log('');

// Test 4: updateTapTaps sin par√°metro count
console.log('üî• TEST 4: updateTapTaps sin par√°metro count');
testMessageListener(
    { action: 'updateTapTaps' },
    null,
    (response) => {
        if (response.error === 'Valor de contador inv√°lido') {
            console.log('‚úÖ TEST 4 PAS√ì: Error manejado correctamente');
        } else {
            console.log('‚ùå TEST 4 FALL√ì: Error no detectado');
        }
    }
);

console.log('');

// Test 5: Acci√≥n no reconocida (para verificar que el default funciona)
console.log('üî• TEST 5: Acci√≥n no reconocida');
testMessageListener(
    { action: 'accionInexistente' },
    null,
    (response) => {
        if (response.error === 'Acci√≥n no reconocida') {
            console.log('‚úÖ TEST 5 PAS√ì: Acci√≥n no reconocida manejada correctamente');
        } else {
            console.log('‚ùå TEST 5 FALL√ì: Error no detectado');
        }
    }
);

console.log('\nüìä ESTADO FINAL:');
console.log(`- contador: ${testState.contador}`);
console.log(`- activo: ${testState.activo}`);
console.log(`- contadorDiv: "${testElementos.contadorDiv.textContent}"`);

console.log('\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS');
console.log('‚úÖ El caso updateTapTaps funciona correctamente');
console.log('‚úÖ El error "Acci√≥n no reconocida" para updateTapTaps ha sido resuelto');

console.log('\n============================================================');
