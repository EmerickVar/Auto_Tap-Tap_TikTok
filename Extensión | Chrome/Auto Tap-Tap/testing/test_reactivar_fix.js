/**
 * =============================================================================
 * PRUEBA DE CORRECCI√ìN: reactivarAutoTapTap is not defined
 * =============================================================================
 * 
 * Script de prueba para verificar que el error "reactivarAutoTapTap is not defined"
 * ha sido resuelto despu√©s de mover la funci√≥n al scope global.
 * 
 * ERROR CORREGIDO: Uncaught ReferenceError: reactivarAutoTapTap is not defined at content.js:1580:21
 */

console.log('üß™ Iniciando prueba de correcci√≥n de reactivarAutoTapTap...');

// Simular el estado global m√≠nimo necesario
const testState = {
    apagadoManualmente: false,
    pausadoPorChat: true,
    activo: false,
    contador: 5,
    tiempoReactivacion: 3
};

const testElementos = {
    selector: { value: '1000' },
    boton: { 
        textContent: '', 
        style: { background: '', opacity: '' }
    },
    cuentaRegresivaDiv: null
};

const testTimers = {
    cuentaRegresiva: null,
    cleanupAll() {
        Object.entries(this).forEach(([key, timer]) => {
            if (typeof timer === 'number') {
                clearTimeout(timer);
                clearInterval(timer);
                this[key] = null;
            }
        });
    }
};

// Simular funciones necesarias
function presionarL() {
    console.log('üëÜ PRUEBA: presionarL() ejecutado');
}

function actualizarColoresBoton() {
    console.log('üé® PRUEBA: actualizarColoresBoton() ejecutado');
}

function safeRuntimeMessage(message) {
    console.log('üì° PRUEBA: Mensaje al background:', message);
    return Promise.resolve();
}

function mostrarNotificacionChat(mensaje, tipo) {
    console.log(`üì± PRUEBA: Notificaci√≥n [${tipo}]: ${mensaje}`);
}

const safeInterval = {
    create(callback, delay) {
        console.log(`‚è∞ PRUEBA: Intervalo creado con delay ${delay}ms`);
        return setInterval(callback, delay);
    }
};

// Mock de funci√≥n reactivarAutoTapTap global (simulando la correcci√≥n)
function reactivarAutoTapTap() {
    console.log('üéØ PRUEBA: reactivarAutoTapTap() ejecut√°ndose correctamente');
    console.log('Estado actual:', { 
        apagadoManualmente: testState.apagadoManualmente,
        pausadoPorChat: testState.pausadoPorChat,
        activo: testState.activo
    });
    
    if (!testState.apagadoManualmente) {
        testState.pausadoPorChat = false;
        testTimers.cleanupAll();
        testState.activo = true;
        
        const intervalo = parseInt(testElementos.selector.value);
        presionarL();
        
        testElementos.boton.textContent = '‚ù§Ô∏è Auto Tap-Tap: ON';
        testElementos.boton.style.background = '#00f2ea';
        actualizarColoresBoton();
        
        safeRuntimeMessage({ 
            action: 'reactivated_from_chat',
            contador: testState.contador,
            enTikTok: true,
            enLive: true
        });
        
        mostrarNotificacionChat('¬°Auto Tap-Tap reactivado! üéâ', 'success');
        console.log('‚úÖ PRUEBA: Auto Tap-Tap reactivado exitosamente');
    } else {
        console.log('‚ö†Ô∏è PRUEBA: No se puede reactivar - fue apagado manualmente');
    }
}

// Implementaci√≥n de mostrarCuentaRegresiva para probar la llamada
function testMostrarCuentaRegresiva(mensajeInicial) {
    console.log(`üöÄ PRUEBA: Iniciando cuenta regresiva: "${mensajeInicial}"`);
    
    let tiempoRestante = testState.tiempoReactivacion;
    
    const interval = setInterval(() => {
        tiempoRestante--;
        
        if (tiempoRestante > 0) {
            console.log(`‚è∞ PRUEBA: ${tiempoRestante}s restantes...`);
        } else {
            console.log('‚ú® PRUEBA: Ejecutando reactivaci√≥n...');
            clearInterval(interval);
            
            // ESTA ES LA L√çNEA QUE CAUSABA EL ERROR ANTES DE LA CORRECCI√ìN
            reactivarAutoTapTap(); // <- Esta llamada ahora deber√≠a funcionar
            
            console.log('üéâ PRUEBA: Cuenta regresiva completada exitosamente');
        }
    }, 1000);
}

// Ejecutar pruebas
function ejecutarPruebas() {
    console.log('\n='.repeat(60));
    console.log('üß™ EJECUTANDO PRUEBA DE CORRECCI√ìN reactivarAutoTapTap');
    console.log('='.repeat(60));
    
    console.log('\nüìã ESTADO INICIAL:');
    console.log('- apagadoManualmente:', testState.apagadoManualmente);
    console.log('- pausadoPorChat:', testState.pausadoPorChat);
    console.log('- activo:', testState.activo);
    
    console.log('\nüî• INICIANDO CUENTA REGRESIVA QUE LLAMA A reactivarAutoTapTap...');
    testMostrarCuentaRegresiva(`‚è≥ Reactivando en ${testState.tiempoReactivacion}s...`);
    
    // Verificar resultado despu√©s de la cuenta regresiva
    setTimeout(() => {
        console.log('\nüìä RESULTADO FINAL:');
        console.log('- activo:', testState.activo);
        console.log('- pausadoPorChat:', testState.pausadoPorChat);
        
        if (testState.activo && !testState.pausadoPorChat) {
            console.log('\n‚úÖ PRUEBA EXITOSA: ERROR "reactivarAutoTapTap is not defined" CORREGIDO');
            console.log('‚úÖ La funci√≥n reactivarAutoTapTap ahora es accesible globalmente');
            console.log('‚úÖ mostrarCuentaRegresiva puede llamar a reactivarAutoTapTap sin errores');
        } else {
            console.log('\n‚ùå PRUEBA FALLIDA: Revisar la implementaci√≥n');
        }
        
        console.log('\n' + '='.repeat(60));
    }, (testState.tiempoReactivacion + 1) * 1000);
}

// Iniciar pruebas
ejecutarPruebas();

/**
 * INSTRUCCIONES PARA USAR ESTE ARCHIVO:
 * 
 * 1. Abrir la consola del navegador en cualquier p√°gina
 * 2. Copiar y pegar todo este c√≥digo
 * 3. Observar los logs durante ~5 segundos
 * 4. Verificar que no aparece el error "reactivarAutoTapTap is not defined"
 * 
 * COMPORTAMIENTO ESPERADO:
 * - Debe ejecutar cuenta regresiva de 3 segundos
 * - Debe llamar a reactivarAutoTapTap() sin errores
 * - Debe mostrar mensaje de √©xito al final
 * - NO debe mostrar "ReferenceError: reactivarAutoTapTap is not defined"
 */
