/**
 * ======================================================================================
 * BACKGROUND.JS - SERVICIO TRABAJADOR (SERVICE WORKER) DE LA EXTENSI√ìN AUTO TAP-TAP
 * ======================================================================================
 * 
 * Este archivo act√∫a como el cerebro de la extensi√≥n de Chrome, ejecut√°ndose en segundo
 * plano como un service worker persistente. Sus responsabilidades principales incluyen:
 * 
 * üéØ FUNCIONALIDADES PRINCIPALES:
 * - Gesti√≥n de insignia (badge) animada en el √≠cono de la extensi√≥n
 * - Sincronizaci√≥n de estado entre content script y background
 * - Comunicaci√≥n bidireccional mediante chrome.runtime messaging
 * - Persistencia de datos usando chrome.storage
 * - Monitoreo peri√≥dico del estado de tabs activos de TikTok
 * 
 * üîÑ FLUJO DE TRABAJO:
 * 1. Inicializaci√≥n al instalar la extensi√≥n
 * 2. Escucha constante de mensajes del content script
 * 3. Actualizaci√≥n visual de la insignia seg√∫n el estado
 * 4. Sincronizaci√≥n autom√°tica cada 5 segundos
 * 
 * üíæ ALMACENAMIENTO:
 * - totalTapTaps: Contador global acumulativo de taps realizados
 * - tiempoReactivacion: Tiempo en segundos para reactivar automatizaci√≥n
 * 
 * @author Emerick Echeverr√≠a Vargas
 * @version 1.0
 * @description Service Worker para gesti√≥n de estado y comunicaci√≥n
 */

// ========================================================================================
// VARIABLES GLOBALES DE ESTADO
// ========================================================================================

/**
 * Contador legacy de taps - Mantenido por compatibilidad
 * @type {number}
 * @deprecated Se usa extensionState.contador en su lugar
 */
let taptapsCount = 0;

/**
 * Referencia al intervalo de animaci√≥n de la insignia
 * Se usa para controlar y limpiar la animaci√≥n cuando sea necesario
 * @type {number|null}
 */
let badgeInterval = null;

/**
 * Estado centralizado de la extensi√≥n
 * Mantiene sincronizada la informaci√≥n entre background y content scripts
 * @type {Object}
 * @property {boolean} active - Indica si la automatizaci√≥n est√° activa
 * @property {number} contador - N√∫mero total de taps realizados en la sesi√≥n actual
 */
let extensionState = {
    active: false,      // Estado de activaci√≥n de la automatizaci√≥n
    contador: 0         // Contador de taps de la sesi√≥n actual
};

// ========================================================================================
// üè∑Ô∏è SISTEMA DE GESTI√ìN DE INSIGNIA (BADGE)
// ========================================================================================

/**
 * Actualiza el texto de la insignia del √≠cono de la extensi√≥n en la barra de herramientas
 * 
 * FUNCIONALIDAD:
 * Esta funci√≥n se encarga de mostrar visualmente el contador de tap-taps en la insignia
 * del √≠cono de la extensi√≥n. Proporciona feedback visual inmediato al usuario sobre
 * la actividad de la automatizaci√≥n.
 * 
 * COMPORTAMIENTO:
 * - Si count > 0: Muestra el n√∫mero en la insignia
 * - Si count = 0: Deja la insignia sin texto (vac√≠a)
 * 
 * CASOS DE USO:
 * 1. Actualizaci√≥n en tiempo real del contador de tap-taps
 * 2. Limpieza de la insignia cuando se detiene la automatizaci√≥n
 * 3. Sincronizaci√≥n visual con el estado del content script
 * 
 * @param {number} count - N√∫mero de tap-taps a mostrar en la insignia
 * @description Controla la visualizaci√≥n num√©rica en la insignia del √≠cono de extensi√≥n
 * 
 * INTEGRACI√ìN:
 * - Llamada desde: syncState(), onMessage listener, animateBadge()
 * - API usada: chrome.action.setBadgeText()
 */
function updateBadge(count) {
    // Convierte el contador a string si es mayor a 0, sino muestra texto vac√≠o
    const text = count > 0 ? count.toString() : '';
    
    // Aplica el texto a la insignia usando Chrome Extensions API
    chrome.action.setBadgeText({ text });
}

/**
 * Inicia la animaci√≥n parpadeante de la insignia cuando la automatizaci√≥n est√° activa
 * 
 * PROP√ìSITO:
 * Proporciona feedback visual din√°mico al usuario indicando que la automatizaci√≥n
 * est√° funcionando activamente. La animaci√≥n alternante llama la atenci√≥n y comunica
 * claramente el estado activo del sistema.
 * 
 * MEC√ÅNICA DE ANIMACI√ìN:
 * 1. üî¥ Limpia cualquier animaci√≥n previa en curso
 * 2. üé® Alterna entre dos tonos de verde cada segundo:
 *    - Verde claro (#00ff88) - Estado "encendido" de la animaci√≥n
 *    - Verde medio (#00cc66) - Estado "apagado" de la animaci√≥n
 * 3. ‚è±Ô∏è Intervalo de 1000ms para crear efecto parpadeante suave
 * 4. üõë Se auto-detiene cuando extensionState.active cambia a false
 * 
 * GESTI√ìN DE RECURSOS:
 * - Limpia intervalos anteriores para evitar memory leaks
 * - Se detiene autom√°ticamente cuando la extensi√≥n se desactiva
 * - Restaura color rojo (#ff0050) al detenerse
 * 
 * ESTADOS VISUALES:
 * - ACTIVO: Animaci√≥n verde parpadeante (vida/funcionando)
 * - INACTIVO: Color rojo s√≥lido (detenido/error)
 * 
 * @description Controla la animaci√≥n visual del estado activo de la extensi√≥n
 * 
 * FLUJO DE EJECUCI√ìN:
 * 1. Verificaci√≥n y limpieza de intervalo previo
 * 2. Inicializaci√≥n de variable de alternancia
 * 3. Creaci√≥n de nuevo intervalo con callback de animaci√≥n
 * 4. Verificaci√≥n continua del estado de extensi√≥n
 * 5. Auto-limpieza al desactivarse
 * 
 * INTEGRACI√ìN:
 * - Llamada desde: onMessage listener (caso 'started')
 * - Depende de: extensionState.active
 * - API usada: chrome.action.setBadgeBackgroundColor()
 */
function animateBadge() {
    // Limpia cualquier animaci√≥n previa para evitar m√∫ltiples intervalos concurrentes
    if (badgeInterval) {
        clearInterval(badgeInterval);
    }
    
    // Variable para controlar la alternancia de colores en la animaci√≥n
    let isAlternate = false;
    
    // Establece intervalo de animaci√≥n con ciclo de 1 segundo
    badgeInterval = setInterval(() => {
        // Verifica si la extensi√≥n sigue activa antes de continuar animaci√≥n
        if (extensionState.active) {
            // Alterna entre dos tonos de verde para crear efecto parpadeante
            chrome.action.setBadgeBackgroundColor({ 
                color: isAlternate ? '#00cc66' : '#00ff88' 
            });
            // Cambia el estado para la siguiente iteraci√≥n
            isAlternate = !isAlternate;
        } else {
            // Si la extensi√≥n se desactiva, detiene la animaci√≥n autom√°ticamente
            clearInterval(badgeInterval);
            // Restaura el color rojo para indicar estado inactivo
            chrome.action.setBadgeBackgroundColor({ color: '#ff0050' });
        }
    }, 1000); // Intervalo de 1 segundo para animaci√≥n suave
}

// ========================================================================================
// üîÑ SISTEMA DE SINCRONIZACI√ìN DE ESTADO
// ========================================================================================

/**
 * Sincroniza el estado del background script con los content scripts activos
 * 
 * ARQUITECTURA DE SINCRONIZACI√ìN:
 * Esta funci√≥n implementa un sistema de sincronizaci√≥n bidireccional que mantiene
 * coherencia entre el service worker (background) y los content scripts ejecut√°ndose
 * en pesta√±as de TikTok. Es crucial para evitar desincronizaci√≥n de estados.
 * 
 * ALGORITMO DE SINCRONIZACI√ìN:
 * 1. üîç DESCUBRIMIENTO: Identifica pesta√±as activas del navegador
 * 2. üéØ FILTRADO: Selecciona solo pesta√±as de TikTok activas
 * 3. üì° CONSULTA: Env√≠a mensaje 'getStatus' a cada content script
 * 4. üìä ACTUALIZACI√ìN: Sincroniza estado local con respuesta remota
 * 5. üé® VISUALIZACI√ìN: Actualiza insignia y animaciones seg√∫n estado
 * 
 * CASOS DE RECUPERACI√ìN:
 * - Manejo de errores de comunicaci√≥n (content script no responde)
 * - Verificaci√≥n de chrome.runtime.lastError para conexiones perdidas
 * - Continuaci√≥n de operaci√≥n aunque algunos tabs fallen
 * 
 * FLUJO DE DATOS:
 * background.js ----[getStatus]----> content.js
 * background.js <---[{activo, contador}]--- content.js
 * 
 * FRECUENCIA DE SINCRONIZACI√ìN:
 * - Ejecutada autom√°ticamente cada 5 segundos (ver setInterval al final)
 * - Tambi√©n puede ser llamada manualmente cuando sea necesario
 * 
 * @async
 * @description Mantiene sincronizado el estado entre background y content scripts
 * 
 * ESTADOS MANEJADOS:
 * - active/activo: Boolean indicando si automatizaci√≥n est√° ejecut√°ndose
 * - contador: Number con total de tap-taps realizados en sesi√≥n actual
 * 
 * INTEGRACI√ìN CON OTROS SISTEMAS:
 * - updateBadge(): Actualiza contador visual
 * - animateBadge(): Inicia animaci√≥n si est√° activo
 * - extensionState: Actualiza estado centralizado
 * 
 * MANEJO DE ERRORES:
 * - try/catch para capturar errores de Chrome API
 * - Verificaci√≥n de chrome.runtime.lastError
 * - Log de errores para debugging
 * - Operaci√≥n no-destructiva (no afecta funcionamiento si falla)
 */
async function syncState() {
    try {
        // Consulta todas las pesta√±as activas del navegador
        const tabs = await chrome.tabs.query({ active: true });
        
        // Filtra solo pesta√±as que contengan TikTok en su URL
        const tiktokTabs = tabs.filter(tab => tab.url?.includes('tiktok.com'));
        
        // Itera a trav√©s de cada pesta√±a de TikTok encontrada
        for (const tab of tiktokTabs) {
            // Env√≠a mensaje de consulta de estado al content script de la pesta√±a
            chrome.tabs.sendMessage(tab.id, { 
                action: 'getStatus' 
            }, response => {
                // Verifica que no haya errores de comunicaci√≥n y que haya respuesta v√°lida
                if (!chrome.runtime.lastError && response) {
                    // Actualiza el estado local con los datos del content script
                    extensionState = {
                        active: response.activo,        // Estado de automatizaci√≥n activa
                        contador: response.contador     // Contador de tap-taps actual
                    };
                    
                    // Actualiza la insignia con el nuevo contador
                    updateBadge(response.contador);
                    
                    // Si la automatizaci√≥n est√° activa, inicia animaci√≥n visual
                    if (response.activo) {
                        animateBadge();
                    }
                }
                // Nota: Los errores de comunicaci√≥n se ignoran silenciosamente para
                // evitar spam en consola cuando las pesta√±as no tienen content script
            });
        }
    } catch (error) {
        // Registra errores para debugging sin interrumpir operaci√≥n
        console.error('Error syncing state:', error);
    }
}

// ========================================================================================
// üöÄ INICIALIZACI√ìN DE LA EXTENSI√ìN
// ========================================================================================

/**
 * Maneja la inicializaci√≥n completa de la extensi√≥n al momento de la instalaci√≥n
 * 
 * EVENTO ACTIVADO CUANDO:
 * - Primera instalaci√≥n de la extensi√≥n
 * - Actualizaci√≥n a nueva versi√≥n de la extensi√≥n
 * - Habilitaci√≥n de extensi√≥n previamente deshabilitada
 * - Recarga de extensi√≥n durante desarrollo
 * 
 * PROCESO DE INICIALIZACI√ìN:
 * 1. üíæ CONFIGURACI√ìN DE ALMACENAMIENTO: Establece valores por defecto en chrome.storage
 * 2. üé® CONFIGURACI√ìN VISUAL: Establece colores y estado inicial de la insignia
 * 3. üîß PREPARACI√ìN DE ESTADO: Prepara variables globales para operaci√≥n
 * 
 * VALORES POR DEFECTO ESTABLECIDOS:
 * - totalTapTaps: 0 (contador acumulativo global de todos los tap-taps)
 * - tiempoReactivacion: 10 (segundos de espera antes de reactivar automatizaci√≥n)
 * 
 * CONFIGURACI√ìN VISUAL INICIAL:
 * - Color de insignia: Rojo (#ff0050) indicando estado inactivo
 * - Texto de insignia: Vac√≠o hasta que se inicie automatizaci√≥n
 * 
 * ARQUITECTURA DE STORAGE:
 * Se usa chrome.storage.local que persiste entre sesiones del navegador
 * y es accesible tanto desde background como content scripts.
 * 
 * @description Inicializa storage y configuraci√≥n visual al instalar la extensi√≥n
 * 
 * FLUJO DE DATOS:
 * 1. chrome.storage.local.get() ‚Üí Lee configuraci√≥n existente
 * 2. Verificaci√≥n de valores existentes
 * 3. chrome.storage.local.set() ‚Üí Establece defaults si no existen
 * 4. chrome.action.setBadgeBackgroundColor() ‚Üí Configura estado visual
 * 
 * CONSIDERACIONES DE RENDIMIENTO:
 * - Operaci√≥n as√≠ncrona no-bloqueante
 * - Solo establece valores si no existen (evita sobreescribir)
 * - Configuraci√≥n una sola vez por ciclo de vida de extensi√≥n
 */
chrome.runtime.onInstalled.addListener(() => {
    // ============================================================================
    // INICIALIZACI√ìN DEL ALMACENAMIENTO PERSISTENTE
    // ============================================================================
    
    /**
     * Obtiene configuraci√≥n existente y establece valores por defecto si es necesario
     * 
     * PAR√ÅMETROS DE STORAGE VERIFICADOS:
     * - totalTapTaps: Contador global acumulativo de tap-taps entre sesiones
     * - tiempoReactivacion: Tiempo en segundos para reactivar automatizaci√≥n
     */
    chrome.storage.local.get(['totalTapTaps', 'tiempoReactivacion'], result => {
        // Verifica si totalTapTaps existe, si no, lo inicializa en 0
        if (!result.totalTapTaps) {
            chrome.storage.local.set({ totalTapTaps: 0 });
        }
        
        // Verifica si tiempoReactivacion existe, si no, lo inicializa en 10 segundos
        if (!result.tiempoReactivacion) {
            chrome.storage.local.set({ tiempoReactivacion: 10 });
        }
    });
    
    // ============================================================================
    // CONFIGURACI√ìN VISUAL INICIAL DE LA INSIGNIA
    // ============================================================================
    
    /**
     * Establece el color inicial de la insignia en rojo para indicar estado inactivo
     * 
     * C√ìDIGO DE COLORES:
     * - #ff0050 (Rojo): Estado inactivo/detenido
     * - #00ff88 (Verde): Estado activo (establecido din√°micamente)
     * - #00cc66 (Verde medio): Usado en animaci√≥n parpadeante
     */
    chrome.action.setBadgeBackgroundColor({ color: '#ff0050' });
});

// ========================================================================================
// üì° SISTEMA DE COMUNICACI√ìN INTER-SCRIPTS (MESSAGE HANDLING)
// ========================================================================================

/**
 * Maneja todos los mensajes entrantes desde content scripts, popup y otros componentes
 * 
 * ARQUITECTURA DE MENSAJER√çA:
 * Este listener act√∫a como el hub central de comunicaci√≥n de la extensi√≥n,
 * procesando diferentes tipos de mensajes y coordinando respuestas apropiadas.
 * Implementa un patr√≥n de switch para routing eficiente de mensajes.
 * 
 * FLUJO DE COMUNICACI√ìN:
 * content.js ----[mensaje]----> background.js
 * popup.js   ----[mensaje]----> background.js
 * background.js ----[respuesta]----> origen
 * 
 * TIPOS DE MENSAJES SOPORTADOS:
 * 1. 'started' - Notifica inicio de automatizaci√≥n
 * 2. 'stopped' - Notifica detenci√≥n de automatizaci√≥n  
 * 3. 'updateTapTaps' - Actualiza contador de tap-taps
 * 4. 'ping' - Verifica conectividad (health check)
 * 
 * PAR√ÅMETROS DE CALLBACK:
 * @param {Object} request - Objeto mensaje con propiedades action y datos adicionales
 * @param {Object} sender - Informaci√≥n sobre el origen del mensaje
 * @param {Function} sendResponse - Callback para enviar respuesta al remitente
 * 
 * PATR√ìN DE RESPUESTA:
 * Todas las respuestas siguen el formato:
 * - √âxito: { success: true, ...datos }
 * - Error: { error: "descripci√≥n del error" }
 * 
 * @description Hub central de procesamiento de mensajes entre componentes
 */
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // Routing de mensajes basado en la propiedad 'action'
    switch(request.action) {
        
        // ====================================================================
        // CASO: AUTOMATIZACI√ìN INICIADA
        // ====================================================================
        case 'started':
            /**
             * Procesa notificaci√≥n de inicio de automatizaci√≥n
             * 
             * ACCIONES EJECUTADAS:
             * 1. Actualiza estado global a activo
             * 2. Sincroniza contador si se proporciona
             * 3. Cambia insignia a modo "ON" con color verde
             * 4. Inicia animaci√≥n parpadeante
             * 5. Confirma operaci√≥n exitosa
             * 
             * DATOS DE REQUEST ESPERADOS:
             * - contador (opcional): N√∫mero actual de tap-taps realizados
             */
            extensionState.active = true;
            
            // Actualiza contador si se proporciona en el mensaje
            if (request.contador !== undefined) {
                extensionState.contador = request.contador;
                updateBadge(request.contador);
            }
            
            // Configura insignia para estado activo
            chrome.action.setBadgeText({ text: 'ON' });
            chrome.action.setBadgeBackgroundColor({ color: '#00ff88' });
            
            // Inicia animaci√≥n visual de estado activo
            animateBadge();
            
            // Confirma procesamiento exitoso
            sendResponse({ success: true });
            break;
            
        // ====================================================================
        // CASO: AUTOMATIZACI√ìN DETENIDA
        // ====================================================================
        case 'stopped':
            /**
             * Procesa notificaci√≥n de detenci√≥n de automatizaci√≥n
             * 
             * ACCIONES EJECUTADAS:
             * 1. Actualiza estado global a inactivo
             * 2. Cambia insignia a modo "OFF" con color rojo
             * 3. Detiene cualquier animaci√≥n en curso
             * 4. Limpia recursos de intervalos
             * 5. Confirma operaci√≥n exitosa
             */
            extensionState.active = false;
            
            // Configura insignia para estado inactivo
            chrome.action.setBadgeText({ text: 'OFF' });
            chrome.action.setBadgeBackgroundColor({ color: '#ff0050' });
            
            // Detiene animaci√≥n y limpia intervalo
            if (badgeInterval) {
                clearInterval(badgeInterval);
            }
            
            // Confirma procesamiento exitoso
            sendResponse({ success: true });
            break;
            
        // ====================================================================
        // CASO: ACTUALIZACI√ìN DE CONTADOR
        // ====================================================================
        case 'updateTapTaps':
            /**
             * Procesa actualizaci√≥n del contador de tap-taps
             * 
             * FUNCIONALIDAD:
             * Permite al content script notificar cambios en el contador
             * sin cambiar el estado de activaci√≥n de la automatizaci√≥n.
             * 
             * DATOS DE REQUEST ESPERADOS:
             * - count: Nuevo n√∫mero de tap-taps realizados
             */
            extensionState.contador = request.count;
            updateBadge(request.count);
            sendResponse({ success: true });
            break;
            
        // ====================================================================
        // CASO: VERIFICACI√ìN DE CONECTIVIDAD (PING)
        // ====================================================================
        case 'ping':
            /**
             * Responde a verificaci√≥n de conectividad
             * 
             * PROP√ìSITO:
             * Permite a otros componentes verificar que el background script
             * est√° funcionando correctamente y puede procesar mensajes.
             * 
             * USO T√çPICO:
             * - Health checks desde content scripts
             * - Verificaci√≥n de conectividad desde popup
             * - Debugging de comunicaci√≥n inter-scripts
             */
            sendResponse({ success: true });
            break;

        // ====================================================================
        // CASO: ACCI√ìN NO RECONOCIDA
        // ====================================================================
        default:
            /**
             * Maneja mensajes con acciones no implementadas
             * 
             * COMPORTAMIENTO:
             * Proporciona respuesta de error descriptiva para debugging
             * y desarrollo de nuevas funcionalidades.
             */
            sendResponse({ error: 'Acci√≥n no reconocida' });
            break;
    }
});

// ========================================================================================
// ‚è∞ SISTEMA DE SINCRONIZACI√ìN AUTOM√ÅTICA PERI√ìDICA
// ========================================================================================

/**
 * Ejecuta sincronizaci√≥n autom√°tica de estado cada 5 segundos
 * 
 * PROP√ìSITO DE LA SINCRONIZACI√ìN PERI√ìDICA:
 * Mantiene coherencia entre el background script y content scripts activos,
 * especialmente importante cuando:
 * - El usuario navega entre pesta√±as de TikTok
 * - Se abren/cierran pesta√±as de TikTok
 * - Hay fallos de comunicaci√≥n temporal
 * - El content script se reinicia o refresca
 * 
 * FRECUENCIA DE SINCRONIZACI√ìN:
 * - Intervalo: 5000ms (5 segundos)
 * - Suficientemente frecuente para mantener UI actualizada
 * - No tan frecuente como para impactar rendimiento
 * 
 * FUNCIONALIDAD EJECUTADA:
 * Llama a syncState() que realiza:
 * 1. Busca pesta√±as activas de TikTok
 * 2. Consulta estado actual de cada content script
 * 3. Actualiza estado local del background script
 * 4. Sincroniza insignia y animaciones visuales
 * 
 * CONSIDERACIONES DE RENDIMIENTO:
 * - Operaci√≥n as√≠ncrona no-bloqueante
 * - Manejo graceful de errores sin interrumpir el intervalo
 * - Filtrado inteligente de pesta√±as para minimizar overhead
 * 
 * CASOS DE USO:
 * - Recuperaci√≥n autom√°tica de desincronizaci√≥n
 * - Actualizaci√≥n de estado al cambiar pesta√±as
 * - Mantener UI consistente entre sesiones largas
 * - Detectar cambios de estado iniciados desde el content script
 * 
 * @description Timer para sincronizaci√≥n autom√°tica cada 5 segundos
 * 
 * INTEGRACI√ìN:
 * - Ejecuta: syncState()
 * - Persiste durante toda la vida del service worker
 * - Se reinicia autom√°ticamente si el service worker se reactiva
 */
setInterval(syncState, 5000);